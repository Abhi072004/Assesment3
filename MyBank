// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

contract Assesment3 {
    mapping(address => uint256) private balances;

    // deposit in sender's account
    // use of require() function
    function deposit() public payable {
        require(msg.value > 0, "Amount must be greater than 0");       
        balances[msg.sender] += msg.value;
    }

    // transferring from sender account
    // use of revert() function
    function transfer(address user, uint256 amount) public{
        if(amount <= 0){
            revert("Amount must be greater than zero");
        }
        else if (balances[msg.sender] < amount){
            revert("Not enough tokens to send");
        }
        else if (amount > 100) {
            revert("Cannot send more than 100 ethers at a time");
        }
        else{
            balances[msg.sender] -= amount;
            balances[user] += amount;
        }
    }

    //balance of sender
    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    //use of assert() function
    function testAssert() public view {
        assert(!(balances[msg.sender] < 0));

        // assert(balances[msg.sender] != 0);
    }
}
